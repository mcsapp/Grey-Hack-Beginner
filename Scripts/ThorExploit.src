// Store
target = params[0]
target_port = params[1].to_int
metax = include_lib("/home/guest/metaxploit.so")
crypto = include_lib("/home/guest/crypto.so")

//make sure we find the router
router = get_router(target)
if (router == null) then
    router = get_router()
end if

// Grab the Ports
ports = router.used_ports

// Steal Port Library
for port in ports
    if (port.port_number == target_port) then
        print ("grabbing: " + router.port_info(port))
    end if
end for
netSession = metax.net_use(target, target_port)
metaLib = netSession.dump_lib

// Scan Library
print ("Scanning Library...")
scanResult = metax.scan(metaLib)

// Check Library Exploits
print ("Checking for exploits...")
for area in scanResult
    scanAddress = metax.scan_address(metaLib, area)
    vulns + scanAddress.split("unsafe check: ")
    exploit = null

    //check for vulns without requirements
    for vuln in vulns
        if (vuln.indexOf("decompiling source...") != null) then continue
        hasRequirements = vuln.indexOf("*") != null
        if (hasRequirements) then
            tagStart = vuln.indexOf("<b>")
            tagEnd = vuln.indexOf("</b>")
            exploit = vuln[tagStart + 3:tagEnd]
        end if
    end for

    // Start Exploiting
    if (exploit) then
        print ("Exploit Found!!")
        print ("overflow: " + area + ":" + exploit + "\n")
        result = metaLib.overflow(area, exploit)
        if (result == 0) then
            print ("\nThis exploit needs extra information to execute.")
            print ("Please submit this to try again.")
            extra_param = user_input ("input: ")
            result = metaLib.overflow(area, exploit, extra_param)
        end if
        print ("Exploit Result: " + result)

        // Shell with a logged in user
        if typeof(result) == "shell" then
            // check user of shell by making a file 
            shell = {}
            if result.host_computer.touch("/home/guest/", "check_user.txt") then
                file = result.host_computer.file("/home/guest/check_user.txt")
                if not file then
                    print ("Error: Could not create file to check user.")
                    print ("")
                    continue
                end if
                shell["user"] = file.owner
                shell["shell"] = result
                file.delete
            end if

            //confirm connection as this user
            print ("would you like a shell as: " + shell["user"])
            user_check = user_input("y/n: ")
            if user_check.val == "y" then
                result.start_terminal
                break
            else
                print ("Cancelling shell... \n")
                continue
            end if
        end if

        //this is a computer and may give us file perms
        if typeof(result) == "computer" then
            
            // check to see if we can access /etc/passwd from this user
            file = result.file("/etc/passwd")
            if not file.has_permission("r") then
                print ("No Permission to /etc/passwd")
                continue
            end if

            // we have the file so decrypt it and give us the root password
            listUsers = file.get_content.split("\n")
            for line in listUsers
                userPass = line.split(":")
                password = crypto.decipher(userPass[1])
                print ("User: " + userPass[0] + " Password: " + password)
                if userPass[0] == "root" then exit
            end for
        end if

        //this is a file and might be valuable but needs to be checked
        if typeof(result) == "file" then
            print ("File Location: " + result.path)

            //is this file a folder or no?
            if (result.is_folder != null) then
                print ("discovered folder!")
                print ("Folder Contents...")
                folders = result.get_folders
                files = result.get_files
                data = ""

                // Remember the folders
                for folder in folders
                    data = data + "Folder " folder.name + "\n"
                
                end for

                // Remember the files
                for file in files
                    data = data + "File " file.name + "\n"
                end for

                // Print the contents
                print (format_columns(data) + "\n")
            else
                print ("File Name... ")
                print (result.name + "\n")
            end if

            // Try to read the file contents
            print ( "would you like to read the file contents? (y/n)")
            file_check = user_input("y/n: ")
            if file_check.val == "y" then
                if (result.is_folder != null) then
                    print ("\nWhich file would you like to open?")
                    file_name = user_input("File Name: ")
                    files = result.get_files
                    for file in files
                        if (file.name == file_name) then
                            print (file.get_content)
                        end if
                    end for
                else
                    print (result.get_content + "\n")
                end if
            else
                print ("Cancelling...")
                continue
            end if
        end if
    else
         print ("No Exploit Found for " + area)
         print ("")
    end if
end for
print ("Exploitation Complete. Thank you for using ThorExploit!")
